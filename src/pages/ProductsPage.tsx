// ============================================================================
// EXEMPLO PERFEITO DE CRUD GEN√âRICO - PRODUTOS
// ============================================================================
// Este arquivo √© um EXEMPLO de como criar um CRUD completo em 5 minutos
// Copie este padr√£o para criar qualquer CRUD novo (Fornecedores, Clientes, etc.)

import React from 'react';
import { ShoppingBagIcon } from '@heroicons/react/24/outline';  // √çcone para o CRUD
import { GenericCRUDPage } from '../components/GenericCRUDPage'; // Componente gen√©rico que faz a m√°gica
import { useGenericCRUD } from '../hooks/useGenericCRUD';        // Hook que gerencia o estado
import { CRUDService } from '../services/CRUDService';           // Servi√ßo que conecta com dados
import type { CRUDConfig } from '../types/crud';                // Tipo para configura√ß√£o

// ============================================================================
// 1Ô∏è‚É£ DEFINIR A INTERFACE DA ENTIDADE
// ============================================================================
// Aqui voc√™ define quais campos o seu produto ter√°
interface Product {
  id: string;           // ID √∫nico (obrigat√≥rio)
  name: string;         // Nome do produto
  category: string;     // Categoria (eletr√¥nicos, roupas, etc.)
  price: number;        // Pre√ßo em reais
  stock: number;        // Quantidade em estoque
  status: 'active' | 'inactive'; // Status ativo/inativo
  createdAt: string;    // Data de cria√ß√£o (obrigat√≥rio)
}

// ============================================================================
// 2Ô∏è‚É£ CRIAR DADOS MOCKADOS (FAKE)
// ============================================================================
// Em desenvolvimento, usamos dados falsos para testar
// Em produ√ß√£o, estes dados viriam de uma API real
const mockProducts: Product[] = [
  {
    id: '1',
    name: 'Notebook Dell Inspiron',
    category: 'Eletr√¥nicos',
    price: 2500,
    stock: 10,
    status: 'active',
    createdAt: '2024-01-15'
  },
  {
    id: '2',
    name: 'Mouse Logitech MX',
    category: 'Acess√≥rios',
    price: 150,
    stock: 25,
    status: 'active',
    createdAt: '2024-01-20'
  },
  {
    id: '3',
    name: 'Teclado Mec√¢nico RGB',
    category: 'Acess√≥rios',
    price: 300,
    stock: 0,
    status: 'inactive',
    createdAt: '2024-02-01'
  }
];

// ============================================================================
// 3Ô∏è‚É£ CONFIGURAR O CRUD (A PARTE MAIS IMPORTANTE!)
// ============================================================================
// Aqui voc√™ define como o CRUD vai se comportar
const productConfig: CRUDConfig<Product> = {
  entity: 'products',                    // Nome da entidade (para URLs, etc.)
  title: 'Produtos',                     // T√≠tulo da p√°gina
  description: 'Gerencie o cat√°logo de produtos', // Descri√ß√£o
  icon: ShoppingBagIcon,                 // √çcone do menu

  // üìä Configura√ß√£o da tabela (quais colunas mostrar)
  table: {
    columns: [
      { 
        key: 'name',        // Campo da entidade
        label: 'Nome',      // Cabe√ßalho da coluna
        sortable: true      // Permite ordena√ß√£o
      },
      { 
        key: 'category', 
        label: 'Categoria', 
        sortable: true 
      },
      { 
        key: 'price', 
        label: 'Pre√ßo', 
        sortable: true,
        // üí∞ PERSONALIZA√á√ÉO: formatar pre√ßo em reais
        render: (value: number) => new Intl.NumberFormat('pt-BR', {
          style: 'currency',    // Formato de moeda
          currency: 'BRL'      // Real brasileiro
        }).format(value)       // Formata o n√∫mero
      },
      { 
        key: 'stock', 
        label: 'Estoque', 
        sortable: true 
      },
      { 
        key: 'status', 
        label: 'Status', 
        sortable: true 
      }
    ],
    pageSize: 10,                    // Mostrar 10 itens por p√°gina
    pageSizeOptions: [10, 25, 50]   // Op√ß√µes de pagina√ß√£o
  },

  // üîç Configura√ß√£o dos filtros (aparecem acima da tabela)
  filters: [
    {
      key: 'category',        // Filtrar por categoria
      label: 'Categoria',
      type: 'select',         // Tipo dropdown
      options: [              // Op√ß√µes do dropdown
        { value: 'Eletr√¥nicos', label: 'Eletr√¥nicos' },
        { value: 'Acess√≥rios', label: 'Acess√≥rios' },
        { value: 'M√≥veis', label: 'M√≥veis' }
      ]
    },
    {
      key: 'status',          // Filtrar por status
      label: 'Status',
      type: 'select',
      options: [
        { value: 'active', label: 'Ativo' },
        { value: 'inactive', label: 'Inativo' }
      ]
    },
    {
      key: 'price',               // Filtrar por pre√ßo
      label: 'Pre√ßo M√≠nimo',
      type: 'number',             // Tipo num√©rico
      placeholder: 'Ex: 100'
    }
  ],

  // ‚öôÔ∏è Configura√ß√µes de comportamento (o que √© permitido fazer)
  behavior: {
    enableCreate: true,                     // Permitir criar produtos
    enableEdit: true,                       // Permitir editar produtos
    enableDelete: true,                     // Permitir excluir produtos
    enableSearch: true,                     // Permitir busca global
    searchFields: ['name', 'category']      // Campos onde a busca funciona
  }
};

// ============================================================================
// 4Ô∏è‚É£ CRIAR SERVI√áO (CONECTA COM OS DADOS)
// ============================================================================
// Este servi√ßo faz a liga√ß√£o entre o componente e os dados
// Par√¢metros: (nome, dados-mock, url-api, usar-mock?)
const productService = new CRUDService<Product>(
  'products',        // Nome da entidade
  mockProducts,      // Dados mockados (desenvolvimento)
  '/api',           // URL da API (produ√ß√£o)
  true              // true = usar mock, false = usar API
);

// ============================================================================
// 5Ô∏è‚É£ COMPONENTE DA P√ÅGINA (S√ì 3 LINHAS DE C√ìDIGO!)
// ============================================================================
export const ProductsPage: React.FC = () => {
  // Hook que gerencia todo o estado do CRUD (dados, filtros, pagina√ß√£o, etc.)
  const crud = useGenericCRUD(productService, productConfig.behavior?.searchFields || []);
  
  // Componente gen√©rico que renderiza todo o CRUD automaticamente
  return <GenericCRUDPage config={productConfig} crud={crud} />;
};

// ============================================================================
// üéä PRONTO! CRUD COMPLETO EM 5 PASSOS!
// ============================================================================
// 
// üìã PARA ADICIONAR √Ä APLICA√á√ÉO:
// 1. Adicionar rota no App.tsx: <Route path="/products" element={<ProductsPage />} />
// 2. Adicionar no menu lateral (MainLayout.tsx)
// 
// üéØ RESULTADO: CRUD COMPLETO COM:
// ‚úÖ Tabela responsiva com colunas configur√°veis
// ‚úÖ Filtros din√¢micos (categoria, status, pre√ßo)
// ‚úÖ Busca global por nome e categoria
// ‚úÖ Pagina√ß√£o autom√°tica
// ‚úÖ Ordena√ß√£o por qualquer coluna
// ‚úÖ Formata√ß√£o autom√°tica de pre√ßos
// ‚úÖ Modo escuro/claro
// ‚úÖ 100% responsivo (mobile + desktop)
// 
// üí° PARA CRIAR OUTRO CRUD:
// Copie este arquivo, mude interface + dados + configura√ß√£o = NOVO CRUD PRONTO!
// ‚úÖ Tabela responsiva
// ‚úÖ Filtros avan√ßados
// ‚úÖ Busca em tempo real
// ‚úÖ Pagina√ß√£o
// ‚úÖ Ordena√ß√£o
// ‚úÖ Modo escuro/claro
// ‚úÖ Design consistente
// ============================================================================
