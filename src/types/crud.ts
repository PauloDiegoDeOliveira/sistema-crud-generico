/* eslint-disable @typescript-eslint/no-explicit-any */
// ============================================================================
// TIPOS GEN√âRICOS PARA SISTEMA CRUD
// ============================================================================
// Este arquivo define todos os tipos TypeScript que tornam o sistema gen√©rico
// Aqui voc√™ entende COMO o sistema funciona por baixo dos panos

import React from 'react';

/**
 * üî• INTERFACE BASE - O CORA√á√ÉO DO SISTEMA GEN√âRICO
 * Todas as entidades (Agent, Product, etc.) DEVEM ter pelo menos estes campos
 */
export interface BaseEntity {
  id: string;           // ID √∫nico obrigat√≥rio
  createdAt: string;    // Data de cria√ß√£o obrigat√≥ria
  [key: string]: any;   // Permite campos personalizados (name, email, etc.)
}

/**
 * üéõÔ∏è TIPOS DE CAMPOS PARA FILTROS E FORMUL√ÅRIOS
 * Define que tipos de input podem ser usados
 */
export type FieldType = 
  | 'text'        // Campo de texto simples
  | 'email'       // Campo de email
  | 'password'    // Campo de senha
  | 'number'      // Campo num√©rico
  | 'select'      // Dropdown de sele√ß√£o
  | 'multiselect' // Sele√ß√£o m√∫ltipla
  | 'date'        // Seletor de data
  | 'daterange'   // Intervalo de datas
  | 'boolean'     // Checkbox verdadeiro/falso
  | 'textarea'    // √Årea de texto grande
  | 'tel'         // Campo de telefone
  | 'url';        // Campo de URL

/**
 * üìã OP√á√ïES PARA CAMPOS SELECT
 * Usado nos dropdowns de filtros e formul√°rios
 */
export interface SelectOption {
  value: string;    // Valor interno
  label: string;    // Texto mostrado ao usu√°rio
  disabled?: boolean; // Se a op√ß√£o est√° desabilitada
}

/**
 * üìä CONFIGURA√á√ÉO DE COLUNA DA TABELA
 * Define como cada coluna da tabela deve aparecer e se comportar
 */
export interface TableColumn<T extends BaseEntity> {
  key: keyof T;                                          // Campo da entidade (ex: 'name', 'email')
  label: string;                                         // T√≠tulo da coluna mostrado na tabela
  sortable?: boolean;                                    // Se pode ordenar por esta coluna
  searchable?: boolean;                                  // Se pode buscar por esta coluna
  filterable?: boolean;                                  // Se pode filtrar por esta coluna
  width?: string;                                        // Largura da coluna (ex: '200px', '20%')
  render?: (value: any, row: T) => React.ReactNode;     // Fun√ß√£o personalizada para mostrar o valor
  className?: string;                                    // Classes CSS personalizadas
}

/**
 * üîç CONFIGURA√á√ÉO DE CAMPO DE FILTRO
 * Define os filtros que aparecem acima da tabela
 */
export interface FilterField<T extends BaseEntity> {
  key: keyof T | string;                                 // Campo para filtrar (ex: 'department')
  label: string;                                         // R√≥tulo do filtro (ex: 'Departamento')
  type: FieldType;                                       // Tipo do input (text, select, etc.)
  placeholder?: string;                                  // Texto de exemplo no input
  options?: SelectOption[];                              // Op√ß√µes para select/multiselect
  defaultValue?: any;                                       // Valor padr√£o para o filtro
}

/**
 * üéØ CONFIGURA√á√ÉO COMPLETA DE UM CRUD
 * Esta √© a "receita" que voc√™ cria para cada CRUD novo
 * EXEMPLO: agentConfig, productConfig, etc.
 */
export interface CRUDConfig<T extends BaseEntity> {
  // üìã Identifica√ß√£o do CRUD
  entity: string;                                        // Nome da entidade (ex: 'agents', 'products')
  title: string;                                         // T√≠tulo mostrado na p√°gina (ex: 'Agentes')
  description?: string;                                  // Descri√ß√£o opcional
  icon?: React.ComponentType<any>;                       // √çcone para o menu

  // üìä Configura√ß√£o da tabela
  table: {
    columns: TableColumn<T>[];                           // Quais colunas mostrar
    defaultSort?: {                                      // Ordena√ß√£o padr√£o
      field: keyof T;                                    // Campo para ordenar (ex: 'name')
      direction: 'asc' | 'desc';                         // Crescente ou decrescente
    };
    pageSize?: number;                                   // Quantos itens por p√°gina (padr√£o: 10)
    pageSizeOptions?: number[];                          // Op√ß√µes de itens por p√°gina [10, 25, 50]
  };

  // üîç Configura√ß√£o de filtros (opcional)
  filters?: FilterField<T>[];                            // Quais filtros mostrar acima da tabela

  // ‚öôÔ∏è Configura√ß√µes de comportamento
  behavior?: {
    enableCreate?: boolean;
    enableEdit?: boolean;
    enableDelete?: boolean;
    enableSearch?: boolean;
    searchFields?: (keyof T)[];
  };
}

/**
 * Estado do CRUD gen√©rico
 */
export interface CRUDState<T extends BaseEntity> {
  // Dados
  items: T[];
  filteredItems: T[];
  selectedItems: T[];
  currentItem: T | null;
  
  // Estados de loading
  loading: boolean;
  
  // Pagina√ß√£o
  currentPage: number;
  pageSize: number;
  totalItems: number;
  totalPages: number;
  
  // Filtros e busca
  filters: Record<string, any>;
  searchTerm: string;
  sortField: keyof T | null;
  sortDirection: 'asc' | 'desc';
  
  // UI
  showFilters: boolean;
  
  // Erros
  error: string | null;
}

/**
 * A√ß√µes do CRUD gen√©rico
 */
export interface CRUDActions<T extends BaseEntity> {
  // Opera√ß√µes CRUD
  create: (data: Partial<T>) => Promise<T>;
  update: (id: string, data: Partial<T>) => Promise<T>;
  delete: (id: string) => Promise<void>;
  
  // Carregamento de dados
  loadItems: () => Promise<void>;
  refreshItems: () => Promise<void>;
  
  // Sele√ß√£o
  selectItem: (item: T) => void;
  selectItems: (items: T[]) => void;
  clearSelection: () => void;
  
  // Filtros e busca
  setFilters: (filters: Record<string, any>) => void;
  clearFilters: () => void;
  setSearchTerm: (term: string) => void;
  setSorting: (field: keyof T, direction: 'asc' | 'desc') => void;
  
  // Pagina√ß√£o
  setPage: (page: number) => void;
  setPageSize: (size: number) => void;
  
  // UI
  toggleFilters: () => void;
  
  // Utilit√°rios
  clearError: () => void;
}

/**
 * Hook do CRUD gen√©rico - retorna estado + a√ß√µes
 */
export interface UseGenericCRUD<T extends BaseEntity> {
  state: CRUDState<T>;
  actions: CRUDActions<T>;
}

/**
 * Props do componente GenericCRUDPage
 */
export interface GenericCRUDPageProps<T extends BaseEntity> {
  config: CRUDConfig<T>;
  className?: string;
  style?: React.CSSProperties;
}
